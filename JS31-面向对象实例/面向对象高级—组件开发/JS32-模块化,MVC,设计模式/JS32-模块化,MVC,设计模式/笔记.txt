为什么要进行模块化开发：
当你的网站开发越来越复杂的时候，会经常遇到这些问题吗？
1、冲突
2、性能
3、依赖
------------------------------------------------------------------------------------------------
seajs
一个适合web端的模块加载器
解决冲突、性能、依赖等问题，提升代码的可维护性
http://seajs.org
模块的概念
seajs如何解决?
①引入sea.js的库

②如何变成模块？
define
③如何调用模块？
exports
seajs.use
④如何依赖模块？
require
------------------------------------------------------------------------------------------------
模块化:

seajs
1.替咱们引入JS，用到谁引用谁			乱、慢――一堆script标签
2.自动解决依赖

------------------------------------------------------------------------------------------------

模块化――
模块――一套功能（用户模块：注册、登陆、密码找回。。。）

1.定义模块
2.使用模块

------------------------------------------------------------------------------------------------

定义模块
define(function (require, exports, module){
	
});

使用模块
seajs.use('文件名', function (mod){  //第一个参数:模块路径(注意路径地址,容易出错),第二个参数:地址加载成功后的回调函数
	mod上面的东西――exports出来的
});



避免冲突、重名
1.封闭空间()()
	优点：方便――保存i
	缺点：没法给外部加

2.命名空间   bds.common.unity.se.getxxx()
	优点：比对象简单
	缺点：长――不好记

3.面向对象
	优点：灵活
	缺点：太麻烦

4.模块化（seaJS）
	优点：方便
	缺点：文件太多

封闭空间
模块化



------------------------------------------------------------------------------------------------

重用（工程性、扩展性）：
1.函数
2.对象
3.模块

------------------------------------------------------------------------------------------------

MVC

后台MVC：	独立
1.后台
2.前端
3.编辑

JS的MVC：
分工――
数据
效果

M	Model		模型（数据）     真正逻辑
V	View		视图（表现）     HTML+CSS
C	Control		控制（领导）   事件操作，DOM操作等

三层：


耦合度――越低越好

M、V不会直接用到对方――否则没法重用

------------------------------------------------------------------------------------------------

MVC、seaJS

------------------------------------------------------------------------------------------------
案例:
百度

MV->C

MVC重在分工

------------------------------------------------------------------------------------------------

MVC
SeaJS

MVC和SeaJS一块儿用



------------------------------------------------------------------------------------------------
模块化历史
ECMAScrpt第六版将正式支持模块语法
nodeJS
commonJS
AMD
requireJS
跟seajs一样，web端模块化
seajs采用cmd规范










